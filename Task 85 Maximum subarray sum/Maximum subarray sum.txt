
The maximum sum subarray problem consists in finding 
the maximum sum of a contiguous subsequence in an 
array or list of integers:

max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
# should be 6: [4, -1, 2, 1]

Easy case is when the list is made up of only positive 
numbers and the maximum sum is the sum of the whole array. 
If the list is made up of only negative numbers, return 0 instead.

Empty list is considered to have zero greatest sum. 
Note that the empty list or array is also a valid sublist/subarray.

-----------------------------------------------------------------------

Задача о максимальной сумме подмассива состоит в нахождении
максимальная сумма непрерывной подпоследовательности в
массив или список целых чисел:

max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
# должно быть 6: [4, -1, 2, 1]

Легкий случай, когда список состоит только из положительных
чисел, а максимальная сумма равна сумме всего массива.
Если список состоит только из отрицательных чисел, вместо этого верните 0.

Пустой список считается имеющим нулевую наибольшую сумму.
Обратите внимание, что пустой список или массив также является 
допустимым подсписком/подмассивом.

-----------------------------------------------------------------------

test.describe("Tests")
test.it('should work on an empty array')   
test.assert_equals(max_sequence([]), 0)
test.it('should work on the example')
test.assert_equals(max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)
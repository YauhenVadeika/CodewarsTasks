
"7777...8?!??!", exclaimed Bob, "I missed it again! Argh!" Every time there's an interesting number coming up, he notices and then promptly forgets. Who doesn't like catching those one-off interesting mileage numbers?

Let's make it so Bob never misses another interesting number. We've hacked into his car's computer, and we have a box hooked up that reads mileage numbers. We've got a box glued to his dash that lights up yellow or green depending on whether it receives a 1 or a 2 (respectively).

It's up to you, intrepid warrior, to glue the parts together. Write the function that parses the mileage number input, and returns a 2 if the number is "interesting" (see below), a 1 if an interesting number occurs within the next two miles, or a 0 if the number is not interesting.

Note: In Haskell, we use No, Almost and Yes instead of 0, 1 and 2.

"Interesting" Numbers
Interesting numbers are 3-or-more digit numbers that meet one or more of the following criteria:

Any digit followed by all zeros: 100, 90000
Every digit is the same number: 1111
The digits are sequential, incementing†: 1234
The digits are sequential, decrementing‡: 4321
The digits are a palindrome: 1221 or 73837
The digits match one of the values in the awesome_phrases array
† For incrementing sequences, 0 should come after 9, and not before 1, as in 7890.
‡ For decrementing sequences, 0 should come after 1, and not before 9, as in 3210.

So, you should expect these inputs and outputs:

# "boring" numbers
is_interesting(3, [1337, 256])    # 0
is_interesting(3236, [1337, 256]) # 0

# progress as we near an "interesting" number
is_interesting(11207, []) # 0
is_interesting(11208, []) # 0
is_interesting(11209, []) # 1
is_interesting(11210, []) # 1
is_interesting(11211, []) # 2

# nearing a provided "awesome phrase"
is_interesting(1335, [1337, 256]) # 1
is_interesting(1336, [1337, 256]) # 1
is_interesting(1337, [1337, 256]) # 2
Error Checking
A number is only interesting if it is greater than 99!
Input will always be an integer greater than 0, and less than 1,000,000,000.
The awesomePhrases array will always be provided, and will always be an array, but may be empty. (Not everyone thinks numbers spell funny words...)
You should only ever output 0, 1, or 2.

-------------------------------------------------------------------------------------------------------

"7777...8?!??!", воскликнул Боб, "Я снова пропустил это! Argh!" Каждый раз, когда появляется интересное число, он замечает, а затем быстро забывает. Кому не нравится ловить эти разовые интересные цифры пробега?

Давайте сделаем так, чтобы Боб никогда не пропустил ни одного интересного номера. Мы взломали компьютер его машины, и у нас есть коробка, которая считывает пробег. У нас есть коробка, приклеенная к его приборной панели, которая загорается желтым или зеленым в зависимости от того, получает ли она 1 или 2 (соответственно).

Вам решать, бесстрашный воин, склеить части вместе. Напишите функцию, которая анализирует введенное число миль и возвращает 2, если число «интересно» (см. ниже), 1, если интересное число встречается в пределах следующих двух миль, или 0, если число не интересно.

Примечание. В Haskell мы используем Нет, Почти и Да вместо 0, 1 и 2.

«Интересные» числа
Интересные числа — это числа из 3 и более цифр, которые соответствуют одному или нескольким из следующих критериев:

Любая цифра, за которой следуют все нули: 100, 90000
Каждая цифра — это одно и то же число: 1111.
Цифры последовательные, сращенные†: 1234
Цифры идут последовательно, по убыванию‡: 4321
Цифры представляют собой палиндром: 1221 или 73837.
Цифры соответствуют одному из значений в массиве awesome_phrases.
† Для возрастающих последовательностей 0 должен стоять после 9, а не перед 1, как в 7890.
‡ Для убывающих последовательностей 0 должен стоять после 1, а не перед 9, как в 3210.

Итак, вы должны ожидать эти входы и выходы:

# "скучные" номера
is_interesting(3, [1337, 256]) # 0
is_interesting(3236, [1337, 256]) # 0

# прогресс по мере приближения к "интересному" числу
is_interesting(11207, []) # 0
is_interesting(11208, []) # 0
is_interesting(11209, []) # 1
is_interesting(11210, []) # 1
is_interesting(11211, []) # 2

# приближается к предоставленной "потрясающей фразе"
is_interesting(1335, [1337, 256]) # 1
is_interesting(1336, [1337, 256]) # 1
is_interesting(1337, [1337, 256]) # 2
Проверка ошибок
Число интересно, только если оно больше 99!
Ввод всегда будет целым числом больше 0 и меньше 1 000 000 000.
Массив awesomePhrases всегда будет предоставляться и всегда будет массивом, но может быть пустым. (Не все думают, что цифры означают смешные слова...)
Вы всегда должны выводить только 0, 1 или 2.

-------------------------------------------------------------------------------------------------------

from solution import is_interesting
import codewars_test as test

@test.describe("Car Mileage numbers")
def desc1():
    @test.it("Sample tests")
    def it1():
        tests = [
            {'n': 3, 'interesting': [1337, 256], 'expected': 0},
            {'n': 1336, 'interesting': [1337, 256], 'expected': 1},
            {'n': 1337, 'interesting': [1337, 256], 'expected': 2},
            {'n': 11208, 'interesting': [1337, 256], 'expected': 0},
            {'n': 11209, 'interesting': [1337, 256], 'expected': 1},
            {'n': 11211, 'interesting': [1337, 256], 'expected': 2},
        ]
        for t in tests:
            test.assert_equals(is_interesting(t['n'], t['interesting']), t['expected'])

-----------------------------------------------------------------------

Consider a "word" as any sequence of capital letters A-Z (not limited to just "dictionary words"). For any word with at least two different letters, there are other words composed of the same letters but in a different order (for instance, STATIONARILY/ANTIROYALIST, which happen to both be dictionary words; for our purposes "AAIILNORSTTY" is also a "word" composed of the same letters as these two).

We can then assign a number to every word, based on where it falls in an alphabetically sorted list of all words made up of the same group of letters. One way to do this would be to generate the entire list of words and find the desired one, but this would be slow if the word is long.

Given a word, return its number. Your function should be able to accept any word 25 letters or less in length (possibly with some letters repeated), and take no more than 500 milliseconds to run. To compare, when the solution code runs the 27 test cases in JS, it takes 101ms.

For very large words, you'll run into number precision issues in JS (if the word's position is greater than 2^53). For the JS tests with large positions, there's some leeway (.000000001%). If you feel like you're getting it right for the smaller ranks, and only failing by rounding on the larger, submit a couple more times and see if it takes.

Python, Java and Haskell have arbitrary integer precision, so you must be precise in those languages (unless someone corrects me).

C# is using a long, which may not have the best precision, but the tests are locked so we can't change it.

Sample words, with their rank:
ABAB = 2
AAAB = 1
BAAA = 4
QUESTION = 24572
BOOKKEEPER = 10743



-----------------------------------------------------------------------

Рассмотрим «слово» как любую последовательность заглавных букв от A до Z 
(не ограничиваясь только «словарными словами»). Для любого слова, 
состоящего по крайней мере из двух разных букв, существуют другие слова, 
состоящие из тех же букв, но в другом порядке (например, СТАЦИОНАРНО/АНТИРОЯЛИСТ, 
которые оба являются словарными словами; слово", состоящее из тех же букв, что и эти два).

Затем мы можем присвоить номер каждому слову в зависимости от того, 
где оно находится в отсортированном по алфавиту списке всех слов, 
состоящих из одной и той же группы букв. 
Один из способов сделать это — сгенерировать весь список слов и найти нужное, 
но это будет медленно, если слово длинное.

По заданному слову вернуть его номер. 
Ваша функция должна иметь возможность принимать любое слово длиной 
25 или менее букв (возможно, с повторением некоторых букв) и выполняться не более 500 миллисекунд. 
Для сравнения, когда код решения запускает 27 тестовых случаев в JS, это занимает 101 мс.

Для очень больших слов вы столкнетесь с проблемами точности чисел в JS 
(если позиция слова больше 2^53). Для тестов JS с большими позициями 
есть некоторый запас хода (0,000000001%). Если вы чувствуете, 
что делаете это правильно для меньших рангов и терпите неудачу 
только из-за округления больших рангов, отправьте еще пару раз и посмотрите, 
потребуется ли это.

Python, Java и Haskell имеют произвольную целочисленную точность, 
поэтому вы должны быть точными в этих языках (если кто-то меня не поправит).

C# использует тип long, который может иметь не самую лучшую точность,
 но тесты заблокированы, поэтому мы не можем его изменить.

-----------------------------------------------------------------------

import codewars_test as test
from solution import listPosition

@test.describe('Anagram') 
def sample_tests():
    @test.it('Must return appropriate values for known inputs')
    def _():
        testValues = {'A' : 1, 'ABAB' : 2, 'AAAB' : 1, 'BAAA' : 4, 'QUESTION' : 24572, 'BOOKKEEPER' : 10743}
        for word in testValues:
            test.assert_equals(listPosition(word), testValues[word], 'Incorrect list position for: ' + word)

-----------------------------------------------------------------------
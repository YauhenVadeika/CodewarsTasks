There is a bus moving in the city, and it takes and drop some 
people in each bus stop.
You are provided with a list (or array) of integer pairs. 
Elements of each pair represent number of people get into bus 
(The first item) and number of people get off the bus (The second item) 
in a bus stop.
Your task is to return number of people who are still in the bus 
after the last bus station (after the last array). 
Even though it is the last bus stop, the bus is not empty and 
some people are still in the bus, and they are probably 
sleeping there :D
Take a look on the test cases.
Please keep in mind that the test cases ensure that the number of 
people in the bus is always >= 0. So the return integer can't be 
negative.
The second value in the first integer array is 0, since the bus is 
empty in the first bus stop.
-----------------------------------------------------------------------
По городу едет автобус, и он берет и опускает некоторые
человек на каждой автобусной остановке.
Вам предоставляется список (или массив) целочисленных пар.
Элементы каждой пары представляют собой количество людей, попавших в автобус.
(первый пункт) и количество людей, вышедших из автобуса (второй пункт)
на автобусной остановке.
Ваша задача вернуть количество людей, которые все еще находятся в автобусе.
после последней автостанции (после последнего массива).
Несмотря на то, что это последняя автобусная остановка, автобус не пустой и
некоторые люди все еще в автобусе, и они, вероятно,
спать там :D
Взгляните на тест-кейсы.
Пожалуйста, имейте в виду, что тестовые случаи гарантируют, что количество
людей в автобусе всегда >= 0. Таким образом, возвращаемое целое число не может быть
отрицательный.
Второе значение в первом целочисленном массиве равно 0, так как шина
пусто на первой автобусной остановке.
-----------------------------------------------------------------------

import codewars_test as test
from solution import number

@test.describe("Fixed Tests")
def fixed_tests():
    @test.it('Basic Test Cases')
    def basic_test_cases():
        test.assert_equals(number([[10,0],[3,5],[5,8]]),5)
        test.assert_equals(number([[3,0],[9,1],[4,10],[12,2],[6,1],[7,10]]),17)
        test.assert_equals(number([[3,0],[9,1],[4,8],[12,2],[6,1],[7,8]]),21)
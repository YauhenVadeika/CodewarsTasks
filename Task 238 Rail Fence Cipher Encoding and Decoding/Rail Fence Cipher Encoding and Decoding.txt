
Create two functions to encode and then decode a string using 
the Rail Fence Cipher. This cipher is used to encode a string 
by placing each character successively in a diagonal along a 
set of "rails". First start off moving diagonally and down. 
When you reach the bottom, reverse direction and move diagonally 
and up until you reach the top rail. Continue until you reach 
the end of the string. Each "rail" is then read left to right 
to derive the encoded string.

For example, the string "WEAREDISCOVEREDFLEEATONCE" could be 
represented in a three rail system as follows:

W       E       C       R       L       T       E
  E   R   D   S   O   E   E   F   E   A   O   C  
    A       I       V       D       E       N    
The encoded string would be:

WECRLTEERDSOEEFEAOCAIVDEN
Write a function/method that takes 2 arguments, a string 
and the number of rails, and returns the ENCODED string.

Write a second function/method that takes 2 arguments, 
an encoded string and the number of rails, and returns 
the DECODED string.

For both encoding and decoding, assume number of rails >= 2 
and that passing an empty string will return an empty string.

Note that the example above excludes the punctuation 
and spaces just for simplicity. There are, however, 
tests that include punctuation. Don't filter out 
punctuation as they are a part of the string.

-------------------------------------------------------------------------------------------------------

Создайте две функции для кодирования, а затем декодируют строку, используя
Железнодорожный шифр. Этот шифр используется для кодирования строки
Поместив каждого персонажа последовательно в диагонали вдоль
набор "Rails". Сначала начните с движения по диагонали и вниз.
Когда вы достигнете дна, обратите направление и перемещайте по диагонали
и вплоть до тех пор, пока не достигнете верхнего рельса. Продолжайте, пока не достигнете
конец строки. Каждое «рельс» затем читается слева направо
Чтобы получить закодированную строку.

Например, строка «носит
представлено в трех железнодорожной системе следующим образом:

W E C R L T E
   E R D S O E F E A O C
     A I V D E N
Кодированная строка будет:

Wecrlteerdsoeefeaocaivden
Напишите функцию/метод, который принимает 2 аргумента, строку
и количество рельсов, и возвращает закодированную строку.

Напишите вторую функцию/метод, который принимает 2 аргумента,
кодированная строка и количество рельсов и возврат
Декодированная строка.

Как для кодирования, так и для декодирования, предположим, что количество рельсов> = 2
И эта передача пустой строки вернет пустую строку.

Обратите внимание, что приведенный выше пример исключает пунктуацию
и пространства только для простоты. Есть, однако,
Тесты, которые включают пунктуацию. Не отфильтровайте
пунктуация, поскольку они являются частью строки.

-------------------------------------------------------------------------------------------------------

import codewars_test as test
from solution import encode_rail_fence_cipher, decode_rail_fence_cipher

@test.describe("Sample tests")
def _():
    @test.it("Encode")
    def __():
        test.assert_equals(encode_rail_fence_cipher("WEAREDISCOVEREDFLEEATONCE", 3), "WECRLTEERDSOEEFEAOCAIVDEN")
        test.assert_equals(encode_rail_fence_cipher("Hello, World!", 3), "Hoo!el,Wrdl l")
        test.assert_equals(encode_rail_fence_cipher("Hello, World!", 4), "H !e,Wdloollr")
        test.assert_equals(encode_rail_fence_cipher("", 3), "")

    @test.it("Decode")
    def __():
        test.assert_equals(decode_rail_fence_cipher("H !e,Wdloollr", 4), "Hello, World!")
        test.assert_equals(decode_rail_fence_cipher("WECRLTEERDSOEEFEAOCAIVDEN", 3), "WEAREDISCOVEREDFLEEATONCE")
        test.assert_equals(decode_rail_fence_cipher("", 3), "")

-----------------------------------------------------------------------

Create a function that takes a positive integer and returns the 
next bigger number that can be formed by rearranging its digits. For example:

12 ==> 21
513 ==> 531
2017 ==> 2071
nextBigger(num: 12)   // returns 21
nextBigger(num: 513)  // returns 531
nextBigger(num: 2017) // returns 2071
If the digits can't be rearranged to form a bigger number, return -1 (or nil in Swift):

9 ==> -1
111 ==> -1
531 ==> -1
nextBigger(num: 9)   // returns nil
nextBigger(num: 111) // returns nil
nextBigger(num: 531) // returns nil

-----------------------------------------------------------------------

Создайте функцию, которая принимает положительное целое число и возвращает
следующее большее число, которое можно составить, переставив его цифры. Например:

12 ==> 21
513 ==> 531
2017 ==> 2071
nextBigger(num: 12) // возвращает 21
nextBigger(num: 513) // возвращает 531
nextBigger(num: 2017) // возвращает 2071
Если цифры нельзя переставить, чтобы сформировать большее число, верните -1 (или ноль в Swift):

9 ==> -1
111 ==> -1
531 ==> -1
nextBigger(num: 9) // возвращает ноль
nextBigger(num: 111) // возвращает ноль
nextBigger(num: 531) // возвращает ноль

-----------------------------------------------------------------------

from solution import next_bigger
import codewars_test as test

@test.describe("Sample tests")
def sample_tests():
    
    @test.it("Examples")
    def examples():    
        test.assert_equals(next_bigger(  12),   21)
        test.assert_equals(next_bigger(  21),   -1)
        test.assert_equals(next_bigger( 513),  531)
        test.assert_equals(next_bigger(2017), 2071)
        test.assert_equals(next_bigger( 414),  441)
        test.assert_equals(next_bigger( 144),  414)
-----------------------------------------------------------------------
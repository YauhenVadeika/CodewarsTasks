
John and Mary want to travel between a few towns A, B, C ... 
Mary has on a sheet of paper a list of distances between these towns. 
ls = [50, 55, 57, 58, 60]. John is tired of driving and he says to 
Mary that he doesn't want to drive more than t = 174 miles and 
he will visit only 3 towns.

Which distances, hence which towns, they will choose so that 
the sum of the distances is the biggest possible to please Mary and John?

Example:
With list ls and 3 towns to visit they can make a choice 
between: [50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60].

The sums of distances are then: 162, 163, 165, 165, 167, 168, 170, 172, 173, 175.

The biggest possible sum taking a limit of 174 into account 
is then 173 and the distances of the 3 corresponding towns is [55, 58, 60].

The function chooseBestSum (or choose_best_sum or ... depending on the language) will take as parameters t (maximum sum of distances, integer >= 0), k (number of towns to visit, k >= 1) and ls (list of distances, all distances are positive or zero integers and this list has at least one element). The function returns the "best" sum ie the biggest possible sum of k distances less than or equal to the given limit t, if that sum exists, or otherwise nil, null, None, Nothing, depending on the language. In that case with C, C++, D, Dart, Fortran, F#, Go, Julia, Kotlin, Nim, OCaml, Pascal, Perl, PowerShell, Reason, Rust, Scala, Shell, Swift return -1.

Examples:
ts = [50, 55, 56, 57, 58] choose_best_sum(163, 3, ts) -> 163

xs = [50] choose_best_sum(163, 3, xs) -> nil (or null or ... or -1 
(C++, C, D, Rust, Swift, Go, ...)

ys = [91, 74, 73, 85, 73, 81, 87] choose_best_sum(230, 3, ys) -> 228

Notes:
try not to modify the input list of distances ls
in some languages this "list" is in fact a string (see the Sample Tests).

-----------------------------------------------------------------------

Джон и Мэри хотят проехать между несколькими городами A, B, C... 
У Мэри есть на листе бумаги список расстояний между этими городами. ls = [50, 55, 57, 58, 60]. Джон устал водить машину и говорит Мэри, что не хочет проехать больше t = 174 миль и посетит только 3 города.

Какие расстояния и, следовательно, какие города они выберут, 
чтобы сумма расстояний была как можно больше, чтобы понравиться Мэри и Джону?

Пример:
Имея список ls и 3 города для посещения, они могут сделать 
выбор между: [50,55,57],[50,55,58],[50,55,60],[50,57,58],[50, 57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60].

Тогда суммы расстояний равны: 162, 163, 165, 165, 167, 168, 170, 172, 173, 175.

Тогда максимально возможная сумма с учетом ограничения в 174 равна 173, а расстояние до 3 соответствующих городов равно [55, 58, 60].

Функция ChooseBestSum (или Choose_best_sum или ... в зависимости от языка) будет принимать в качестве параметров t (максимальная сумма расстояний, целое число >= 0), k (количество городов для посещения, k >= 1) и ls (список расстояния, все расстояния являются положительными или нулевыми целыми числами, и в этом списке есть хотя бы один элемент). Функция возвращает «наилучшую» сумму, то есть наибольшую возможную сумму k расстояний, меньших или равных заданному пределу t, если эта сумма существует, или в противном случае nil, null, None, Nothing, в зависимости от языка. В этом случае с C, C++, D, Dart, Fortran, F#, Go, Julia, Kotlin, Nim, OCaml, Pascal, Perl, PowerShell, Reason, Rust, Scala, Shell, Swift верните -1.

Примеры:
ts = [50, 55, 56, 57, 58] Choose_best_sum(163, 3, ts) -> 163

xs = [50] Choose_best_sum(163, 3, xs) -> nil (или null или... или -1 (C++, C, D, Rust, Swift, Go,...)

ys = [91, 74, 73, 85, 73, 81, 87] Choose_best_sum(230, 3, ys) -> 228

Примечания:
старайтесь не изменять входной список расстояний ls
в некоторых языках этот "список" на самом деле является строкой (см. Примеры тестов).

-----------------------------------------------------------------------

test.it("Bigger numbers")
xs = [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]
test.assert_equals(choose_best_sum(230, 4, xs), 230)
test.assert_equals(choose_best_sum(430, 5, xs), 430)
test.assert_equals(choose_best_sum(430, 8, xs), None)
-----------------------------------------------------------------------
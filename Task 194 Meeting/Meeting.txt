
John has invited some friends. His list is:

s = "Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill";
Could you make a program that

makes this string uppercase
gives it sorted in alphabetical order by last name.
When the last names are the same, sort them by first name. 
Last name and first name of a guest come in the result between parentheses separated by a comma.

So the result of function meeting(s) will be:

"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL, WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)"
It can happen that in two distinct families with the same family name two people have the same first name too.

Notes
You can see another examples in the "Sample tests".

-----------------------------------------------------------------------

Джон пригласил друзей. Его список:

s = "Фред:Корвилл;Уилфред:Корвилл;Барни:Торнбулл;Бетти:Торнбулл;Бьон:Торнбулл;Рафаэль:Корвилл;Альфред:Корвилл";
Не могли бы вы сделать программу, которая

делает эту строку прописной
дает это отсортировано в алфавитном порядке по фамилии.
Если фамилии совпадают, отсортируйте их по имени.
Фамилия и имя гостя вводятся в результате в скобках через запятую.

Таким образом, результатом функционального собрания (ов) будет:

"(КОРВИЛЛ, АЛЬФРЕД)(КОРВИЛЛ, ФРЕД)(КОРВИЛЛ, РАФАЭЛЬ)(КОРВИЛЛ, УИЛФРЕД)(ТОРНБУЛЛ, БАРНИ)(ТОРНБУЛЛ, БЕТТИ)(ТОРНБУЛЛ, БЬОН)"
Может случиться так, что в двух разных семьях с одинаковой фамилией два человека также имеют одинаковое имя.

Ноты
Другие примеры вы можете посмотреть в разделе "Образцы тестов".
-----------------------------------------------------------------------

def testing(s, exp):
    print("Testing:\n" + s)
    ans = meeting(s)
    print("ACTUAL =\n%s" % (ans))
    print("EXPECT =\n%s" % (exp))
    print(ans == exp)
    test.assert_equals(ans, exp)

test.describe("meeting")
test.it("Basic tests")
def tests():
    testing("Alexis:Wahl;John:Bell;Victoria:Schwarz;Abba:Dorny;Grace:Meta;Ann:Arno;Madison:STAN;Alex:Cornwell;Lewis:Kern;Megan:Stan;Alex:Korn", 
            "(ARNO, ANN)(BELL, JOHN)(CORNWELL, ALEX)(DORNY, ABBA)(KERN, LEWIS)(KORN, ALEX)(META, GRACE)(SCHWARZ, VICTORIA)(STAN, MADISON)(STAN, MEGAN)(WAHL, ALEXIS)")
    testing("John:Gates;Michael:Wahl;Megan:Bell;Paul:Dorries;James:Dorny;Lewis:Steve;Alex:Meta;Elizabeth:Russel;Anna:Korn;Ann:Kern;Amber:Cornwell", 
        "(BELL, MEGAN)(CORNWELL, AMBER)(DORNY, JAMES)(DORRIES, PAUL)(GATES, JOHN)(KERN, ANN)(KORN, ANNA)(META, ALEX)(RUSSEL, ELIZABETH)(STEVE, LEWIS)(WAHL, MICHAEL)")
    testing("Alex:Arno;Alissa:Cornwell;Sarah:Bell;Andrew:Dorries;Ann:Kern;Haley:Arno;Paul:Dorny;Madison:Kern", 
        "(ARNO, ALEX)(ARNO, HALEY)(BELL, SARAH)(CORNWELL, ALISSA)(DORNY, PAUL)(DORRIES, ANDREW)(KERN, ANN)(KERN, MADISON)")

tests()
print("<COMPLETEDIN::>")
print("<COMPLETEDIN::>")

-----------------------------------------------------------------------
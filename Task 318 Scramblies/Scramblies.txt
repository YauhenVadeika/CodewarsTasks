
Complete the function scramble(str1, str2) that returns 
true if a portion of str1 characters can be rearranged to match str2, 
otherwise returns false.

Notes:

Only lower case letters will be used (a-z). 
No punctuation or digits will be included.
Performance needs to be considered.
Examples
scramble('rkqodlw', 'world') ==> True
scramble('cedewaraaossoqqyt', 'codewars') ==> True
scramble('katas', 'steak') ==> False

-----------------------------------------------------------------------

Завершите функцию scramble(str1, str2), которая возвращает
true, если часть символов str1 можно переставить так, 
чтобы они соответствовали str2,
в противном случае возвращает ложь.

Примечания:

Будут использоваться только строчные буквы (a-z). 
Никакие знаки препинания или цифры не будут включены.
Необходимо учитывать производительность.
Примеры
скремблировать('rkqodlw', 'мир') ==> Истинно
scramble('cedewaraaossoqqyt', 'codewars') ==> True
scramble('катас', 'стейк') ==> False

-----------------------------------------------------------------------

import codewars_test as test
from solution import scramble


def dotest(s1, s2, expected):
    actual = scramble(s1, s2)
    test.assert_equals(actual, expected, f"With\ns1 = \"{s1}\"\ns2 = \"{s2}\"")


@test.describe("Tests")
def test_group():
    
    @test.it("Sample tests")
    def test_case():
        for s1, s2, expected in [
            ('rkqodlw', 'world', True),
            ('cedewaraaossoqqyt', 'codewars', True),
            ('katas', 'steak', False),
            ('scriptjava', 'javascript', True),
            ('scriptingjava', 'javascript', True)
        ]:
            dotest(s1, s2, expected)
            
    @test.it("Example large test")
    def large_test():
        s1 = "abcdefghijklmnopqrstuvwxyz" * 10_000
        s2 = "zyxcba" * 9_000
        dotest(s1, s2, True)

-----------------------------------------------------------------------
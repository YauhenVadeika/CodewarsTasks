
Given two strings s1 and s2, we want to visualize how different the two strings are. We will only take into account the lowercase letters (a to z). First let us count the frequency of each lowercase letters in s1 and s2.

s1 = "A aaaa bb c"

s2 = "& aaa bbb c d"

s1 has 4 'a', 2 'b', 1 'c'

s2 has 3 'a', 3 'b', 1 'c', 1 'd'

So the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2. In the following we will not consider letters when the maximum of their occurrences is less than or equal to 1.

We can resume the differences between s1 and s2 in the following string: "1:aaaa/2:bbb" where 1 in 1:aaaa stands for string s1 and aaaa because the maximum for a is 4. In the same manner 2:bbb stands for string s2 and bbb because the maximum for b is 3.

The task is to produce a string in which each lowercase letters of s1 or s2 appears as many times as its maximum if this maximum is strictly greater than 1; these letters will be prefixed by the number of the string where they appear with their maximum value and :. If the maximum is in s1 as well as in s2 the prefix is =:.

In the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and "Example Tests".

Hopefully other examples can make this clearer.

s1 = "my&friend&Paul has heavy hats! &"
s2 = "my friend John has many many friends &"
mix(s1, s2) --> "2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

s1 = "mmmmm m nnnnn y&friend&Paul has heavy hats! &"
s2 = "my frie n d Joh n has ma n y ma n y frie n ds n&"
mix(s1, s2) --> "1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

s1="Are the kids at home? aaaaa fffff"
s2="Yes they are here! aaaaa fffff"
mix(s1, s2) --> "=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh"
Note for Swift, R, PowerShell
The prefix =: is replaced by E:

s1 = "mmmmm m nnnnn y&friend&Paul has heavy hats! &"
s2 = "my frie n d Joh n has ma n y ma n y frie n ds n&"
mix(s1, s2) --> "1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss"

-------------------------------------------------------------------------------------------------------

Имея две строки s1 и s2, мы хотим визуализировать, насколько они различаются. Мы будем учитывать только строчные буквы (от a до z). Сначала давайте подсчитаем частоту каждой строчной буквы в s1 и s2.

s1 = "Ааааа бб с"

s2 = "& aaa bbb c d"

s1 имеет 4 'a', 2 'b', 1 'c'

s2 имеет 3 'a', 3 'b', 1 'c', 1 'd'

Таким образом, максимум для «a» в s1 и s2 равен 4 из s1; максимум для «b» равен 3 из s2. В дальнейшем мы не будем рассматривать буквы, максимальное количество которых меньше или равно 1.

Мы можем резюмировать различия между s1 и s2 в следующей строке: «1:aaaa/2:bbb», где 1 в 1:aaaa означает строку s1 и aaaa, поскольку максимальное значение для a равно 4. Таким же образом 2:bbb обозначает строку s2 и bbb, поскольку максимальное значение b равно 3.

Задача состоит в том, чтобы создать строку, в которой каждая строчная буква s1 или s2 встречается столько раз, сколько ее максимум, если этот максимум строго больше 1; перед этими буквами будет стоять номер строки, в которой они появляются, с их максимальным значением и :. Если максимум находится как в s1, так и в s2, префикс =:.

В результате подстроки (например, подстрока 2:nnnnn или 1:hhh; она содержит префикс) будут располагаться в порядке убывания их длины, а при одинаковой длине — в возрастающем лексикографическом порядке (буквы и цифры — более точно отсортированы по кодовой точке); различные группы будут разделены символом '/'. См. примеры и «Примеры тестов».

Надеюсь, другие примеры могут прояснить это.

s1 = "у моего&друга&Пола тяжелые шляпы! &"
s2 = "у моего друга Джона много друзей &"
mix(s1, s2) --> "2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/ =:сс"

s1 = "ммммм м ннннн у&друга&Пола тяжелые шляпы! &"
s2 = "у моего друга Джона много друзей ds n&"
mix(s1, s2) --> "1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/ =:сс"

s1="Дети дома? ааааа ффффф"
s2="Да, они здесь! ааааа ффффф"
mix(s1, s2) --> "=:aaaaaa/2:eeeeee/=:ffffff/1:tt/2:rr/=:hh"
Примечание для Swift, R, PowerShell
Префикс =: заменяется на E:

s1 = "ммммм м ннннн у&друга&Пола тяжелые шляпы! &"
s2 = "у моего друга Джона много друзей ds n&"
mix(s1, s2) --> "1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/ Э:сс"
-------------------------------------------------------------------------------------------------------

import codewars_test as test
from solution import mix

@test.describe("Mix")
def _():
    @test.it("Basic Tests")
    def _():
        test.assert_equals(mix("Are they here", "yes, they are here"), "2:eeeee/2:yy/=:hh/=:rr")
        test.assert_equals(mix("Sadus:cpms>orqn3zecwGvnznSgacs","MynwdKizfd$lvse+gnbaGydxyXzayp"), '2:yyyy/1:ccc/1:nnn/1:sss/2:ddd/=:aa/=:zz')
        test.assert_equals(mix("looping is fun but dangerous", "less dangerous than coding"), "1:ooo/1:uuu/2:sss/=:nnn/1:ii/2:aa/2:dd/2:ee/=:gg")
        test.assert_equals(mix(" In many languages", " there's a pair of functions"), "1:aaa/1:nnn/1:gg/2:ee/2:ff/2:ii/2:oo/2:rr/2:ss/2:tt")
        test.assert_equals(mix("Lords of the Fallen", "gamekult"), "1:ee/1:ll/1:oo")
        test.assert_equals(mix("codewars", "codewars"), "")
        test.assert_equals(mix("A generation must confront the looming ", "codewarrs"), "1:nnnnn/1:ooooo/1:tttt/1:eee/1:gg/1:ii/1:mm/=:rr")

------------------------------------------------------------------------------------------------------